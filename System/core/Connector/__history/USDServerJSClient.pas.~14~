unit USDServerJSClient;

interface

uses
  FireDAC.Comp.Client, Rest.Response.Adapter, REST.Client, System.JSON,
  System.Classes, System.SysUtils, REST.Types, Data.DB;

type
  TSDServerJSClient = class
  private
    ResponseAdapter: TRESTResponseDataSetAdapter;
    FResponse: TRESTResponse;
    Request: TRESTRequest;
    RestClient: TRESTClient;
    URLBase: string;
    FToken: string;
    function AutenticarAPI(AResponse: TRESTResponse): string;
  public
    constructor Create(AServidor, APorta: string; ARESTClient: TRESTClient;
      ARESTRequest: TRESTRequest; ARESTResponse: TRESTResponse;
      AResponseAdapter: TRESTResponseDataSetAdapter);
    property Token: string read FToken;
    property Response: TRESTResponse read FResponse;

    //Funcoes para comunicacao com os HTTP Verbs responsaveis pelo CRUD
    procedure Get(sURI: string; ADataSet: TDataSet);
    procedure GetOne(sURI: string; AParam: string);
    function Put(sURI: string; AParam: string; AJSON: string): string;
    function Post(sURI: string; AJSON: string): string;
    function Delete(sURI: string; AParam: string): string;
    function Parametrize(AJSON: string): string;
  end;

implementation

{ TSDServerJSClient }

function TSDServerJSClient.AutenticarAPI(AResponse: TRESTResponse): string;
var
  jsObj: TJSONObject;
  jsPair: TJSONPair;
  jsStream: TStringStream;
  Retorno: string;
const
  _URIAuth  = 'autenticacao';
  _credenciais = '?username=%s&password=%s';
begin
  Retorno := '';
  //Monta a URL de autenticacao com usuario e senha como ultimos parametros
  Self.RestClient.BaseURL := Self.URLBase + _URIAuth + Format(_credenciais,['estagiario','@D5estagio2019']);

  try
    Self.Request.Execute;
  except on E: Exception do
    raise Exception.Create('Erro ao tentar conectar com servidor. Detalhe: ' + E.Message);
  end;

  //Nesse ponto em diante recebemos o retorno completo via rest response e extraimos apenas o token
  jsStream := TStringStream.Create(Self.Response.JSONValue.ToString);
  jsObj    := TJSONObject.Create;
  jsObj.Parse(jsStream.Bytes,0);

  for jsPair in jsObj do
  begin
    if jsPair.JsonString.Value = 'token' then
    begin
      Retorno := jsPair.JsonValue.Value;
      Break;
    end;
  end;

  Result := Retorno;
end;

constructor TSDServerJSClient.Create(AServidor, APorta: string; ARESTClient: TRESTClient;
      ARESTRequest: TRESTRequest; ARESTResponse: TRESTResponse;
      AResponseAdapter: TRESTResponseDataSetAdapter);
var
  sURL: string;
begin
  //Monta a URL base para a comunicacao e requisicoes a API
  sURL := 'http://' + AServidor + ':' + APorta + '/agenda';

  //Inicializa os controles necessarios para a comunicacao REST
  Self.RestClient := ARESTClient;

  Self.URLBase := sURL;

  Self.FResponse   := ARESTResponse;
  Self.Request     := ARESTRequest;

  Self.Request.Client := Self.RestClient;

  Self.ResponseAdapter := AResponseAdapter;

  //Parametriza o controle responsavel por transformar a request em dados
  Self.ResponseAdapter.Response := Self.Response;

  //Faz a autenticacao com a API e recebe um token
  //Esse token sera necessario para todas as demais requisicoes pelo sistema
  Self.FToken := Self.AutenticarAPI(Self.Response);

  if Self.Token = '' then
    Self.Destroy;
end;

function TSDServerJSClient.Delete(sURI, AParam: string): string;
var
  sURL: string;
begin
  sURL := Self.URLBase + sURI + '/' + AParam + Parametrize(EmptyStr);

  Self.Request.Method := rmDELETE;

  Self.Request.Execute;

  Result := Self.Response.JSONValue.ToString;
end;

procedure TSDServerJSClient.GetOne(sURI: string; AParam: string);
begin
  //Monta a url de comunicacao com a API Rest ja com os parametros necessarios
  Self.RestClient.BaseURL := Self.URLBase + sURI + '/' + AParam +
  //Passa o token de autenticacao
  Self.Parametrize(EmptyStr);

  //Seta o HTTP Verb como Get
  Self.Request.Method := rmGET;

  //Faz a requisicao a API
  Self.Request.Execute;
end;

function TSDServerJSClient.Parametrize(AJSON: string): string;
var
  jsObj: TJSONObject;
  jsPair: TJSONPair;
  jsStream: TStringStream;
  ParamURL: string;
begin
  ParamURL := '?';

  if AJSON <> EmptyStr then
  begin
    jsStream := TStringStream.Create(AJSON);
    jsObj    := TJSONObject.Create;
    jsObj.Parse(jsStream.Bytes,0);

    for jsPair in jsObj do
    begin
      Self.RestClient.AddParameter(jsPair.JsonString.Value, jsPair.JsonValue.Value);
    end;
  end;

  ParamURL := ParamURL + 'token=' + Self.Token;

  Result := ParamURL;
end;

function TSDServerJSClient.Post(sURI, AJSON: string): string;
var
  sURL: string;
begin
  sURL := Self.URLBase + sURI + Parametrize(AJSON);
  Self.Request.Method := rmPOST;
  Self.Request.Execute;

  Result := Self.Response.JSONValue.ToString;
end;

function TSDServerJSClient.Put(sURI, AParam: string; AJSON: string): string;
var
  sURL: string;
begin
  //Monta a url com a requisicao a API rest
  sURL := Self.URLBase + sURI + '/' + AParam +
    //Seta os parametros vindos da string JSON e acrescenta o token de autenticacao
    Parametrize(AJSON);

  //Seta o http verb como Put
  Self.Request.Method := rmPUT;

  //Faz a requisicao a API
  Self.Request.Execute;

  //Retorna o resultado da request enviado da API
  Result := Self.Response.JSONValue.ToString;
end;

procedure TSDServerJSClient.Get(sURI: string; ADataSet: TDataSet);
begin
  Self.RestClient.BaseURL := Self.URLBase + sURI + '?token=' + Self.Token;
  Self.Request.Method := rmGET;

  try
    Self.Request.Execute;

    Self.ResponseAdapter.Dataset := ADataSet;
  except on E: Exception do
    raise Exception.Create('Erro ao tentar executar método no servidor. Detalhe: ' +
      E.Message);
  end;
end;

end.

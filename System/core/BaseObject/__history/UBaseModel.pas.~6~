unit UBaseModel;

interface

uses UEntity, System.Rtti, CAtribEntity, System.JSON, System.Classes, TypInfo,
  SysUtils, FireDAC.Comp.Client, UDMConnector, Data.DB, FireDAC.Comp.DataSet,
  Rest.JSON;

type
  TBaseModel = class(TGenericEntity)
  private
    FLista: TFDDataSet;
    Connector: TObject;
    function GetRoute(Obj: TObject): string;
    procedure SetObjeto(AOrigem: TJSONValue);
    // procedure AfterConstruction; override;
  public
    constructor Create(ADataSet: TFDDataSet);
    procedure AfterConstruction;
    property Lista: TFDDataSet read FLista;
    function GetProp(AProp: string): string;
    procedure SetProp(AProp: string; AValue: string);

    // Metodos para o CRUD com RestFull
    procedure GET(AID: string);
    function Save: string;
    function SaveMany(ADataSet: TFDDataSet): string;
    function Delete: string;

  protected
    function ToJSON: string;
    function JSONize(const Origem: TFDDataSet): string;
  end;

implementation

uses
  Vcl.Dialogs;

{ TBaseModel }

procedure TBaseModel.AfterConstruction;
begin
  inherited AfterConstruction;
  Self.FLista := TFDDataSet.Create(nil);
  // Obtem a lista de dados do banco atraves de request para a API
  DMConnector.SDClient.GET(GetRoute(TObject(Self)), Self.FLista);

end;

constructor TBaseModel.Create(ADataSet: TFDDataSet);
begin
  Self.FLista := ADataSet;
  // Obtem a lista de dados do banco atraves de request para a API
  DMConnector.SDClient.GET(GetRoute(TObject(Self)), Self.FLista);
end;

function TBaseModel.Delete: string;
var
  sID: string;
begin
  sID := Self.GetProp('id');

  if sID = '0' then
  begin
    Exit;
  end
  else
  begin
    //
    Result := DMConnector.SDClient.Delete(GetRoute(Self), sID);
  end;
end;

procedure TBaseModel.GET(AID: string);
begin
  DMConnector.SDClient.GetOne(GetRoute(TObject(Self)), AID);
  Self.SetObjeto(DMConnector.SDClient.Response.JSONValue);
end;

function TBaseModel.GetRoute(Obj: TObject): string;
var
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Atributo: TCustomAttribute;
begin
  // Usa os recursos de RTTI(Run-Time Type Information) para identificar o nome
  // da rota definida na API para acesso aos dados do cadastro
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Obj).ClassInfo);
  for Atributo in TypObj.GetAttributes do
  begin
    if Atributo is Route then
      Exit(Route(Atributo).Name);
  end;
end;

function TBaseModel.JSONize(const Origem: TFDDataSet): string;
const
  _JSONPrefix = '{';
  _JSONSufix = '}';
  _JSONBlockIni = '[';
  _JSONBlockFim = ']';
var
  strJSON, JSONResult: string;
  i, j: Integer;
begin
  JSONResult := '';
  if Origem.RecordCount > 0 then
  begin
    if Origem.RecordCount > 1 then
    begin
      JSONResult := JSONResult + _JSONBlockIni;
      for j := 0 to Origem.RecordCount - 1 do
      begin
        for i := 0 to Origem.FieldCount - 1 do
        begin
          strJSON := strJSON + '"' + Origem.Fields[i].FieldName + '": ' + '"' +
            Origem.Fields[i].AsString + '","';
        end;
        strJSON := Copy(strJSON, 1, length(strJSON) - 1);
        strJSON := _JSONPrefix + strJSON + _JSONSufix + ',';
      end;
      strJSON := Copy(strJSON, 1, length(strJSON) - 1);
      JSONResult := JSONResult + strJSON + _JSONBlockFim;
    end
    else
    begin
      for i := 0 to Origem.FieldCount - 1 do
      begin
        strJSON := strJSON + '"' + Origem.Fields[i].FieldName + '": ' + '"' +
          Origem.Fields[i].Value + '","';
      end;
    end;
  end;

  Result := JSONResult;
end;

function TBaseModel.GetProp(AProp: string): string;
var
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Prop: TRttiProperty;
  Atributo: TCustomAttribute;
begin
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Self).ClassInfo);

  for Prop in TypObj.GetProperties do
  begin
    for Atributo in Prop.GetAttributes do
    begin
      if Atributo is FieldName then
      begin
        if FieldName(Atributo).Name = AProp then
        begin
          // Verifica o tipo de dados aceito pelo campo
          case Prop.GetValue(TObject(Self)).Kind of
            // Tipos referentes a texto
            tkWChar, tkLString, tkWString, tkString, tkChar, tkUString:
              Exit(Prop.GetValue(TObject(Self)).AsString);

            // Tipos referentes a numeros inteiros
            tkInteger, tkInt64:
              Exit(IntToStr(Prop.GetValue(TObject(Self)).AsInteger));

            // Tipos referentes a float,real,etc(todos com ponto flutuante)
            tkFloat:
              Exit(FloatToStr(Prop.GetValue(TObject(Self)).AsExtended));

            // Tipos referentes a booleanos e outros logicos
            tkEnumeration:
              if Prop.GetValue(TObject(Self)).AsBoolean then
                Exit('True')
              else
                Exit('False');
          end;
        end;
      end;
    end;
  end;
end;

function TBaseModel.Save: string;
var
  sID: string;
begin
  sID := Self.GetProp('id');

  if sID = '0' then
  begin
    //Self.SetProp('id', '19');
    Result := DMConnector.SDClient.Post(GetRoute(Self), Self.ToJSON);
    // Exit;
  end
  else
  begin
    //
    Result := DMConnector.SDClient.Put(GetRoute(Self), sID, Self.ToJSON);
  end;
end;

function TBaseModel.SaveMany(ADataSet: TFDDataSet): string;
begin
  Result := DMConnector.SDClient.Post(GetRoute(Self), Self.JSONize(ADataSet));
end;

procedure TBaseModel.SetObjeto(AOrigem: TJSONValue);
var
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Prop: TRttiProperty;
  Atributo: TCustomAttribute;
  Tipo: TTypeKind;
  BoolStr: string;
  jsObj: TJSONObject;
  jsPair: TJSONPair;
  jsStream: TStringStream;
begin
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Self).ClassInfo);

  jsStream := TStringStream.Create(AOrigem.ToString);
  jsObj := TJSONObject.Create;
  jsObj.Parse(jsStream.Bytes, 0);

  for Prop in TypObj.GetProperties do
  begin
    for Atributo in Prop.GetAttributes do
    begin
      if Atributo is FieldName then
      begin
        for jsPair in jsObj do
        begin
          if jsPair.JsonString.Value = FieldName(Atributo).Name then
          begin
            // Verifica o tipo de dados aceito pelo campo
            case Prop.GetValue(TObject(Self)).Kind of
              // Tipos referentes a texto
              tkWChar, tkLString, tkWString, tkString, tkChar, tkUString:
                Prop.SetValue(TObject(Self), jsPair.JSONValue.Value);

              // Tipos referentes a numeros inteiros
              tkInteger, tkInt64:
                Prop.SetValue(TObject(Self), StrToInt(jsPair.JSONValue.Value));

              // Tipos referentes a float,real,etc(todos com ponto flutuante)
              tkFloat:
                Prop.SetValue(TObject(Self),
                  StrToFloat(jsPair.JSONValue.Value));

              // Tipos referentes a booleanos e outros logicos
              tkEnumeration:
                Prop.SetValue(TObject(Self), StrToBool(jsPair.JSONValue.Value));
            end;
            Break;
          end;
        end;
      end;
    end;
  end;
end;

procedure TBaseModel.SetProp(AProp, AValue: string);
var
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Prop: TRttiProperty;
  Atributo: TCustomAttribute;
  Tipo: TTypeKind;
begin
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Self).ClassInfo);

  for Prop in TypObj.GetProperties do
  begin
    for Atributo in Prop.GetAttributes do
    begin
      if Atributo is FieldName then
      begin
        if AProp = FieldName(Atributo).Name then
        begin
          // Verifica o tipo de dados aceito pelo campo
          case Prop.GetValue(TObject(Self)).Kind of
            // Tipos referentes a texto
            tkWChar, tkLString, tkWString, tkString, tkChar, tkUString:
              Prop.SetValue(TObject(Self), AValue);

            // Tipos referentes a numeros inteiros
            tkInteger, tkInt64:
              Prop.SetValue(TObject(Self), StrToInt(AValue));

            // Tipos referentes a float,real,etc(todos com ponto flutuante)
            tkFloat:
              Prop.SetValue(TObject(Self), StrToFloat(AValue));

            // Tipos referentes a booleanos e outros logicos
            tkEnumeration:
              Prop.SetValue(TObject(Self), StrToBool(AValue));
          end;
          Break;
        end;
      end;
    end;
  end;

end;

function TBaseModel.ToJSON: string;
var
  JSONList: string;
  Contexto: TRttiContext;
  TypObj: TRttiType;
  Prop: TRttiProperty;
  Atributo: TCustomAttribute;
  BoolStr: string;
const
  _JSONPrefix = '{';
  _JSONSufix = '}';
begin
  Contexto := TRttiContext.Create;
  TypObj := Contexto.GetType(TObject(Self).ClassInfo);

  for Prop in TypObj.GetProperties do
  begin
    for Atributo in Prop.GetAttributes do
    begin
      if Atributo is FieldName then
      begin
        // if FieldName(Atributo).Name = AProp then
        // begin
        // Verifica o tipo de dados aceito pelo campo
        case Prop.GetValue(TObject(Self)).Kind of
          // Tipos referentes a texto
          tkWChar, tkLString, tkWString, tkString, tkChar, tkUString:
            JSONList := JSONList + '"' + FieldName(Atributo).Name + '": ' + '"'
              + Prop.GetValue(TObject(Self)).AsString + '",';

          // Tipos referentes a numeros inteiros
          tkInteger, tkInt64:
            JSONList := JSONList + '"' + FieldName(Atributo).Name + '": ' +
              IntToStr(Prop.GetValue(TObject(Self)).AsInteger) + ',';

          // Tipos referentes a float,real,etc(todos com ponto flutuante)
          tkFloat:
            JSONList := JSONList + '"' + FieldName(Atributo).Name + '": ' +
              FloatToStr(Prop.GetValue(TObject(Self)).AsExtended) + ',';

          // Tipos referentes a booleanos e outros logicos
          tkEnumeration:
            if Prop.GetValue(TObject(Self)).AsBoolean then
              BoolStr := 'true';
        else
          BoolStr := 'false';
          JSONList := JSONList + '"' + FieldName(Atributo).Name + '": ' +
            BoolStr + ',';
        end;
        // end;
      end;
    end;
  end;

  JSONList := Copy(JSONList, 1, length(JSONList) - 1);

  Result := _JSONPrefix + JSONList + _JSONSufix;
end;

end.
